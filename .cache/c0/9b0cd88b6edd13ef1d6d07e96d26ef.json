{"id":"../node_modules/logform/json.js","dependencies":[{"name":"D:\\Dev Projects\\JournalTrawler\\package.json","includedInParent":true,"mtime":1623449116788},{"name":"D:\\Dev Projects\\JournalTrawler\\node_modules\\logform\\package.json","includedInParent":true,"mtime":1622892300672},{"name":"D:\\Dev Projects\\JournalTrawler\\node_modules\\logform\\.babelrc","includedInParent":true,"mtime":1622892300672},{"name":"./format","loc":{"line":3,"column":23},"parent":"D:\\Dev Projects\\JournalTrawler\\node_modules\\logform\\json.js","resolved":"D:\\Dev Projects\\JournalTrawler\\node_modules\\logform\\format.js"},{"name":"triple-beam","loc":{"line":4,"column":28},"parent":"D:\\Dev Projects\\JournalTrawler\\node_modules\\logform\\json.js","resolved":"D:\\Dev Projects\\JournalTrawler\\node_modules\\triple-beam\\index.js"},{"name":"fast-safe-stringify","loc":{"line":5,"column":30},"parent":"D:\\Dev Projects\\JournalTrawler\\node_modules\\logform\\json.js","resolved":"D:\\Dev Projects\\JournalTrawler\\node_modules\\fast-safe-stringify\\index.js"},{"name":"buffer","parent":"D:\\Dev Projects\\JournalTrawler\\node_modules\\logform\\json.js","resolved":"C:\\Users\\aaron\\AppData\\Local\\Yarn\\Data\\global\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\nconst jsonStringify = require('fast-safe-stringify');\n\n/*\n * function replacer (key, value)\n * Handles proper stringification of Buffer and bigint output.\n */\nfunction replacer(key, value) {\n  if (value instanceof Buffer)\n    return value.toString('base64');\n  // eslint-disable-next-line valid-typeof\n  if (typeof value === 'bigint')\n    return value.toString();\n  return value;\n}\n\n/*\n * function json (info)\n * Returns a new instance of the JSON format that turns a log `info`\n * object into pure JSON. This was previously exposed as { json: true }\n * to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts = {}) => {\n  info[MESSAGE] = (opts.stable ? jsonStringify.stableStringify\n    : jsonStringify)(info, opts.replacer || replacer, opts.space);\n  return info;\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/logform/json.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/logform/json.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}}],"sources":{"../node_modules/logform/json.js":"'use strict';\n\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\nconst jsonStringify = require('fast-safe-stringify');\n\n/*\n * function replacer (key, value)\n * Handles proper stringification of Buffer and bigint output.\n */\nfunction replacer(key, value) {\n  if (value instanceof Buffer)\n    return value.toString('base64');\n  // eslint-disable-next-line valid-typeof\n  if (typeof value === 'bigint')\n    return value.toString();\n  return value;\n}\n\n/*\n * function json (info)\n * Returns a new instance of the JSON format that turns a log `info`\n * object into pure JSON. This was previously exposed as { json: true }\n * to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts = {}) => {\n  info[MESSAGE] = (opts.stable ? jsonStringify.stableStringify\n    : jsonStringify)(info, opts.replacer || replacer, opts.space);\n  return info;\n});\n"},"lineCount":32}},"error":null,"hash":"e1c3084ffabfeda46099da140d6be4d2","cacheData":{"env":{}}}