{"id":"../node_modules/colorspace/index.js","dependencies":[{"name":"D:\\Dev Projects\\JournalTrawler\\package.json","includedInParent":true,"mtime":1623449116788},{"name":"D:\\Dev Projects\\JournalTrawler\\node_modules\\colorspace\\package.json","includedInParent":true,"mtime":1622892300755},{"name":"color","loc":{"line":3,"column":20},"parent":"D:\\Dev Projects\\JournalTrawler\\node_modules\\colorspace\\index.js","resolved":"D:\\Dev Projects\\JournalTrawler\\node_modules\\color\\index.js"},{"name":"text-hex","loc":{"line":4,"column":18},"parent":"D:\\Dev Projects\\JournalTrawler\\node_modules\\colorspace\\index.js","resolved":"D:\\Dev Projects\\JournalTrawler\\node_modules\\text-hex\\index.js"}],"generated":{"js":"'use strict';\n\nvar color = require('color')\n  , hex = require('text-hex');\n\n/**\n * Generate a color for a given name. But be reasonably smart about it by\n * understanding name spaces and coloring each namespace a bit lighter so they\n * still have the same base color as the root.\n *\n * @param {string} namespace The namespace\n * @param {string} [delimiter] The delimiter\n * @returns {string} color\n */\nmodule.exports = function colorspace(namespace, delimiter) {\n  var split = namespace.split(delimiter || ':');\n  var base = hex(split[0]);\n\n  if (!split.length) return base;\n\n  for (var i = 0, l = split.length - 1; i < l; i++) {\n    base = color(base)\n    .mix(color(hex(split[i + 1])))\n    .saturate(1)\n    .hex();\n  }\n\n  return base;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/colorspace/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/colorspace/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"../node_modules/colorspace/index.js":"'use strict';\n\nvar color = require('color')\n  , hex = require('text-hex');\n\n/**\n * Generate a color for a given name. But be reasonably smart about it by\n * understanding name spaces and coloring each namespace a bit lighter so they\n * still have the same base color as the root.\n *\n * @param {string} namespace The namespace\n * @param {string} [delimiter] The delimiter\n * @returns {string} color\n */\nmodule.exports = function colorspace(namespace, delimiter) {\n  var split = namespace.split(delimiter || ':');\n  var base = hex(split[0]);\n\n  if (!split.length) return base;\n\n  for (var i = 0, l = split.length - 1; i < l; i++) {\n    base = color(base)\n    .mix(color(hex(split[i + 1])))\n    .saturate(1)\n    .hex();\n  }\n\n  return base;\n};\n"},"lineCount":30}},"error":null,"hash":"b4963373309d2834b254f662073613f1","cacheData":{"env":{}}}